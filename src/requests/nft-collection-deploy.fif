#!/usr/bin/env fift -s
"TonUtil.fif" include
"Asm.fif" include


// parse CLI & params

def? $1 { @' $1 } { "1" } cond parse-int =: seqno  // wallet seqno
def? $2 { @' $2 } { "500000000" } cond parse-int =: coll_init_ng  // in nanotons
def? $3 { @' $3 } { "build" } cond =: build_path  // build path
def? $4 { @' $4 } { "../secrets" } cond =: secret_path  // secret path
def? $5 { @' $5 } { "addr" } cond =: addr_path  // address path
def? $6 { @' $6 } { build_path +"/nft-collection-deploy" } cond =: file_base  // file path prefix

0 =: coll_wc
3 =: send_mode
secret_path +"/wallet.pk" load-keypair nip =: wallet_pk
addr_path +"/wallet.addr" load-address 2=: wallet_addr
addr_path +"/owner.addr" load-address 2=: owner_addr
addr_path +"/royalty.addr" load-address 2=: royalty_addr
100 =: royalty_base
5 =: royalty_factor

// collection content URI (uri --> base64 (UTF-8-based) encode)
"aHR0cHM6Ly9pcGZzLmlvL2lwZnMvUW1jbkt4OGNGY3VXUkp4czRyajdxTDUzd1VvaEhmaVRjWnVySGZ4dmZoZm5vWA=="
=: collection_content_uri

 // item content base uri (uri -->  base64 (UTF-8-based) encode)
"aHR0cHM6Ly9pcGZzLmlvL2lwZnMv"
=: item_content_base_uri


// --------------------- Collection contract state init ---------------------

// code
build_path +"/nft-collection-code.fif" include =: collection_code
build_path +"/nft-item-code.fif" include =: item_code

// data
<b
   b{100} s,           // 10+0 - owner address prefix
   owner_addr addr,    // owner address
   0 64 u,             // next item index
   <b  // content
      <b  // collection content
         0x01 8 u, // offchain prefix 
         collection_content_uri base64>B B, // collection URI
      b> ref,
      <b  // common content
         item_content_base_uri base64>B B, // item base URI
      b> ref,            
   b> ref,
   item_code ref, // item code
   <b  // royalty
      royalty_factor 16 u,  // royalty factor
      royalty_base 16 u,    // royalty base
      b{100} s,             // 10+0 - royalty address prefix
      royalty_addr addr,   // royalty address
   b> ref,
b> =: collection_data

// create StateInit = (flags, code, data, libs)
<b 
   b{0011} s, 
   collection_code ref, 
   collection_data ref,
   null dict,
b> =: collection_state_init
collection_state_init ."StateInit: " cr <s csr. cr

// create smart contract address = hash(StateInit)
collection_state_init hashu coll_wc swap 2dup 2constant collection_addr
."Smart contract address: " 2dup .addr cr
2dup file_base +".addr" save-address-verbose
."Non-bounceable address (for init): " 2dup 7 .Addr cr
."Bounceable address (for later access): " 6 .Addr cr


// --------------------- Internal message from Wallet to Contract ---------------------

<b
   seqno 32 u,     // wallet seq_no
   send_mode 8 u,  // send_mode
   
   // body - to be sent from wallet to collection contract
   <b
      // int_msg_info, ihr_disabled, bounce, bounced, src_address (to be filled by server)
      b{010000} s, 

      // to_address: address prefix, wc, address
      b{100} s,
      collection_addr addr,

      // init coints + type
      coll_init_ng Gram,
      b{0} s,

      // ihr_fee, fwd_fee, created_lt, created_at: 4 + 4 + 64 + 32 = 104
      0 104 u,

      // collection state init (include as ref)
      b{0} s,
      collection_state_init <s s,

      // no body
      b{0} s,
      null dict,
   b> ref,
b> =: internal_body


// signing body
internal_body hashu wallet_pk ed25519_sign_uint =: signature


// --------------------- Final query to Blockchain ---------------------

<b
   // header: prefix, none from_address (external msg)
   b{1000} s,

   // from_address: address prefix, wc, address
   b{100} s,
   wallet_addr addr,

   // grams importFee = 0
   0 Gram,

   // no state_init, body as slice
   b{00} s,
   signature B,
   internal_body <s s,
b>

cr
2 boc+>B dup Bx. cr
file_base +"-query.boc" tuck B>file
."(Saved smart contract creating query to file " type .")" cr

cr ."Owner Address:" cr owner_addr 6 .Addr cr
cr ."Roylaty Address:" cr royalty_addr 6 .Addr cr
cr ."Wallet Address:" cr wallet_addr 6 .Addr cr
cr ."Collection Address:" cr collection_addr 6 .Addr cr

cr ."seqno: " seqno .dump
cr ."amount (ng): " seqno coll_init_ng .dump cr cr
