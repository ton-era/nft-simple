#!/usr/bin/env fift -s
"TonUtil.fif" include
"Asm.fif" include

// parameters
def? $1 { @' $1 } { "build" } cond =: build-path  // build path
def? $2 { @' $2 } { "../secrets" } cond =: secret-path  // secret path
def? $3 { @' $3 } { build-path +"/nft-collection-deploy" } cond =: file-base  // file path prefix

0 =: collection_wc
0 =: seqno
3 =: send_mode
50000000 =: collection_init_coins

// collection owner address
"kQBjH7QOlm36j9eae_w3d1AGx7GcOalxXo_blPv5PcfOgw9K"
$>smca 0= abort"bad address"
=: owner_flags
=: owner_addr
=: owner_wc

// collection content URI (uri --> base64 (UTF-8-based) encode)
"aHR0cHM6Ly9pcGZzLmlvL2lwZnMvUW1jbkt4OGNGY3VXUkp4czRyajdxTDUzd1VvaEhmaVRjWnVySGZ4dmZoZm5vWA=="
=: collection_content_uri

 // item content base uri (uri -->  base64 (UTF-8-based) encode)
"aHR0cHM6Ly9pcGZzLmlvL2lwZnMv"
=: item_content_base_uri

// royalty, % = 100 * factor / base
100 =: royalty_base
5 =: royalty_factor

// royalty address
"kQBjH7QOlm36j9eae_w3d1AGx7GcOalxXo_blPv5PcfOgw9K"  
$>smca 0= abort"bad address"
=: royalty_flags
=: royalty_addr
=: royalty_wc

// wallet address
"kQBjH7QOlm36j9eae_w3d1AGx7GcOalxXo_blPv5PcfOgw9K"  
$>smca 0= abort"bad address"
=: wallet_flags
=: wallet_addr
=: wallet_wc

// wallet pk
secret-path +"/wallet.pk" load-keypair nip =: wallet_pk


// --------------------- Collection contract state init ---------------------

// code
build-path +"/nft-collection-code.fif" include =: collection_code
build-path +"/nft-item-code.fif" include =: item_code

// data
<b
   b{100} s,           // 10+0 - owner address prefix
   owner_wc 8 i,       // owner wc
   owner_addr 256 u,   // owner in-workchain address
   0 64 u,             // next item index
   <b  // content
      <b  // collection content
         0x01 8 u, // offchain prefix 
         collection_content_uri base64>B B, // collection URI
      b> ref,
      <b  // common content
         item_content_base_uri base64>B B, // item base URI
      b> ref,            
   b> ref,
   item_code ref, // item code
   <b  // royalty
      royalty_factor 16 u,  // royalty factor
      royalty_base 16 u,    // royalty base
      b{100} s,             // 10+0 - royalty address prefix
      royalty_wc 8  i,      // royalty wc
      royalty_addr 256 u,   // royalty address
   b> ref,
b> =: collection_data

// create StateInit = (flags, code, data, libs)
<b 
   b{0011} s, 
   collection_code ref, 
   collection_data ref,
   null dict,
b> =: collection_state_init
collection_state_init ."StateInit: " cr <s csr. cr

// create smart contract address = hash(StateInit)
collection_state_init hashu collection_wc swap 2dup 2constant collection_addr
."Smart contract address: " 2dup .addr cr
2dup file-base +".addr" save-address-verbose
."Non-bounceable address (for init): " 2dup 7 .Addr cr
."Bounceable address (for later access): " 6 .Addr cr


// --------------------- Internal message from Wallet to Contract ---------------------

<b
   seqno 32 u,     // wallet seq_no
   send_mode 8 u,  // send_mode
   
   // body - to be sent from wallet to collection contract
   <b
      // int_msg_info, ihr_disabled, bounce, bounced, src_address (to be filled by server)
      b{010000} s, 

      // to_address: address prefix, wc, address
      b{100} s,
      collection_addr addr,

      // init coints + type
      4 4 u,
      collection_init_coins 32 u,
      b{0} s,

      // ihr_fee, fwd_fee, created_lt, created_at: 4 + 4 + 64 + 32 + 1 + 1 = 106
      0 106 u,

      // collection state init (include as ref)
      b{1} s,
      collection_state_init ref,

      // no body
      b{0} s,
      null dict,
   b> ref,
b> =: internal_body


// signing body
internal_body hashu wallet_pk ed25519_sign_uint =: signature


// --------------------- Final query to Blockchain ---------------------

<b
   // header: prefix, none from _address (external msg)
   b{1000} s,

   // to_address: address prefix, wc, address
   b{100} s,
   wallet_wc 8 i,
   wallet_addr 256 u,

   // grams importFee = 0
   0 Gram,

   // no state_init
   b{0} s,
   null dict,

   // body as slice - to be executed by wallet
   b{0} s,
   signature B,
   internal_body <s s,
b>

cr
2 boc+>B dup Bx. cr
file-base +"-query.boc" tuck B>file
."(Saved smart contract creating query to file " type .")" cr

cr ."Collection Address:" cr collection_addr 6 .Addr cr cr
