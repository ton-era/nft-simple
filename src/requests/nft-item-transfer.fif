#!/usr/bin/env fift -s
"TonUtil.fif" include
"Asm.fif" include


// parse CLI & params

$1 parse-int =: seqno     // wallet seqno
$2 =: item_address        // nft address
$3 =: new_owner_address   // new owner address
def? $4 { @' $4 } { "10000000" } cond parse-int =: item_ng  // nanotons to item
def? $5 { @' $5 } { "../secrets" } cond =: secret_path  // secret path
def? $6 { @' $6 } { "addr" } cond =: addr_path  // address path
def? $7 { @' $7 } { "build" } cond =: build_path  // build path
def? $8 { @' $8 } { build_path +"/nft-item-transfer" } cond =: file_base  // file path prefix

3 =: send_mode
0x5fcc3d14 =: op_transfer
secret_path +"/wallet.pk"    load-keypair nip =: wallet_pk
addr_path   +"/wallet.addr"  load-address 2=: wallet_addr

// item address
item_address $>smca 0= abort"bad address"
=: item_flags
=: item_addr
=: item_wc

// new owner address
new_owner_address $>smca 0= abort"bad address"
=: new_owner_flags
=: new_owner_addr
=: new_owner_wc


// --------------------- Internal message from Wallet to Contract ---------------------

<b
   seqno 32 u,     // wallet seq_no
   send_mode 8 u,  // send_mode

   // body - to be sent from wallet to collection contract
   <b
      // int_msg_info, ihr_disabled, bounce, bounced, src_address (to be filled by server)
      b{011000} s, 

      // nft address: flags, wc, address
      b{100} s,
      item_wc 8 i,
      item_addr 256 u,

      // coints to be passed to nft + type
      item_ng Gram,
      b{0} s,

      // ihr_fee, fwd_fee, created_lt, created_at: 4 + 4 + 64 + 32 = 104 (to be filled by server)
      0 104 u,

      // no state init, no body
      b{01} s,

      <b
         // operation: transfer
         op_transfer 32 u,

         // query_id
         0 64 u,

         // new owner address: flags, wc, address
         b{100} s,
         new_owner_wc 8 i,
         new_owner_addr 256 u,

         // response address: none
         b{100} s,
         wallet_addr addr,

         // no payload
         0 1 u,

         // forward amount to new_owner_address + type
         item_ng Gram,
         b{0} s,

         // no MESSAGE
      b> ref,
   b> ref,
b> =: internal_body


// signing body
internal_body hashu wallet_pk ed25519_sign_uint =: signature


// --------------------- Final external query to Blockchain ---------------------

<b
   // header: prefix, none from_address (external msg)
   b{1000} s,

   // from_address: address flags, wc, address
   b{100} s,
   wallet_addr addr,

   // grams importFee = 0
   0 Gram,

   // no state_init, body as slice
   b{00} s,
   signature B,
   internal_body <s s,
b>

cr
2 boc+>B dup Bx. cr
file_base +"-query.boc" tuck B>file
."(Saved smart contract creating query to file " type .")" cr

cr ."Wallet Address:" cr wallet_addr 6 .Addr cr
cr ."New Owner Address:" cr new_owner_wc new_owner_addr new_owner_flags smca>$ .dump cr
cr ."NFT Address:" cr item_wc item_addr item_flags smca>$ .dump cr

cr ."seqno: " seqno .dump
cr ."item amount (ng): " item_ng .dump
