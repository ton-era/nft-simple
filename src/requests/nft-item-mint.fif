#!/usr/bin/env fift -s
"TonUtil.fif" include
"Asm.fif" include


// parse CLI & params

$1 parse-int =: seqno  // wallet seqno
$2 =: coll_address  // wallet seqno
$3 parse-int =: item_index  // NFT next index in collection
def? $4 { @' $4 } { "70000000" } cond parse-int =: coll_ng  // nanotons to collection
def? $5 { @' $5 } { "50000000" } cond parse-int =: item_ng  // nanotons from collection to nft
def? $6 { @' $6 } { "build" } cond =: build_path  // build path
def? $7 { @' $7 } { "../secrets" } cond =: secret_path  // secret path
def? $8 { @' $8 } { "addr" } cond =: addr_path  // address path
def? $9 { @' $9 } { build_path +"/nft-item-mint" } cond =: file_base  // file path prefix

3 =: send_mode
secret_path +"/wallet.pk"    load-keypair nip =: wallet_pk
addr_path   +"/wallet.addr"  load-address 2=: wallet_addr
addr_path   +"/owner.addr"   load-address 2=: owner_addr

 // item content uri (uri -->  base64 (UTF-8-based) encode)
"UW1XQlhCN1BnaFFwRzFzRDJtUWppS0JEamhUbVRHN0NCdUVkWFduVzdUUGVSVz9maWxlbmFtZT1oYXJvbGQuanBn"
=: item_content_uri

// collection address
coll_address $>smca 0= abort"bad address"
=: coll_flags
=: coll_addr
=: coll_wc


// --------------------- Item contract mint body ---------------------
// NFT has no explicit state init - NFT state init is resolved during mint via collection (see nft-collection.fc) 

<b
   1 32 u,  // 0 op. code - deploy new nft
   0 64 u,  // query id
   item_index 64 u,  // item index

   // init coints + type
   item_ng Gram,
   b{0} s,

   <b
      // owner_address: prefix, wc, address
         b{100} s,
         owner_addr addr,

      // item content URI 
      <b item_content_uri base64>B B, b> ref,
   b> ref,
b> =: item_mint_body


// --------------------- Internal message from Wallet to Contract ---------------------

<b
   seqno 32 u,     // wallet seq_no
   send_mode 8 u,  // send_mode
   
   // body - to be sent from wallet to collection contract
   <b
      // int_msg_info, ihr_disabled, bounce, bounced, src_address (to be filled by server)
      b{010000} s, 

      // coll_address: prefix, wc, address
      b{100} s,
      coll_wc 8 i,
      coll_addr 256 u,

      // coints to be passed to colection + type
      coll_ng Gram,
      b{0} s,

      // ihr_fee, fwd_fee, created_lt, created_at: 4 + 4 + 64 + 32 = 104 (to be filled by server)
      0 104 u,

      // no state init, body as ref
      b{01} s,
      item_mint_body ref,
   b> ref,
b> =: internal_body


// signing body
internal_body hashu wallet_pk ed25519_sign_uint =: signature


// --------------------- Final external query to Blockchain ---------------------

<b
   // header: prefix, none from_address (external msg)
   b{1000} s,

   // from_address: address prefix, wc, address
   b{100} s,
   wallet_addr addr,

   // grams importFee = 0
   0 Gram,

   // no state_init, body as slice
   b{00} s,
   signature B,
   internal_body <s s,
b>

cr
2 boc+>B dup Bx. cr
file_base +"-query.boc" tuck B>file
."(Saved smart contract creating query to file " type .")" cr

cr ."Wallet Address:" cr wallet_addr 6 .Addr cr
cr ."Item Owner Address:" cr owner_addr 6 .Addr cr
cr ."Collection Address:" cr coll_wc coll_addr coll_flags smca>$ .dump cr

cr ."seqno: " seqno .dump
cr ."item index: " item_index .dump
cr ."coll amount (ng): " coll_ng .dump
cr ."nft amount (ng):  " item_ng .dump cr cr
